#!/usr/bin/env ruby

require 'logger'
require 'ruby-prof'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), "..", "lib")

Signal.trap("SIGPIPE", "SYSTEM_DEFAULT")
require 'pin2dmd_dump'

filename = ARGV.shift

$logger = Logger.new(STDOUT)
$logger.info("Loading #{filename}")
dump = Pin2DmdDump.from_file(filename)
$logger.info("Loaded #{filename}")

$logger.info("Frames: #{dump.frames.length}")

filename = "masks/dm/ball.json"
mask = Image.from_json(File.read(filename))
final_mask = Image.from_json(File.read("masks/dm/final_score.json"))

templates = (0..9).to_a.map do |n|
  [n, Image.from_json(File.read("masks/dm/#{n}.json"))]
end
separator = Image.from_json(File.read("masks/dm/separator.json"))

previous_total = nil
prof = false

state = {}
events = []

RubyProf.start if prof
times = []
dump.frames.each.with_index do |f, i|
  start_time = Time.now
  image = f.monochrome_image
  if image.matches_mask?(mask)
    image.mask!(0, 0, 128, 23) # extract just the numbers

    region_start = nil
    bounds = []

    (0...image.width).each do |x|
      empty = image.region_empty?(x, 0, 1, 23)
      if !region_start && !empty
        region_start = x
      elsif region_start && empty
        bounds << [region_start, x]
        region_start = nil
      end
    end

    digits = []
    success = true
    bounds.each do |bound|
      image.mask!(bound[0], 0, bound[1] - bound[0], 23)
      number = image.fit_to_content
      next if separator == number
      t = templates.detect {|n, template|
        template == number
      }

      unless t
        success = false
        break
      end

      digits.push t[0]
    end

    if success && !digits.empty?
      total = 0
      digits.reverse.each.with_index.each do |d, i|
        total += d * (10 ** i)
      end
      if total != previous_total
        if total == 0
          if !state[:playing]
            $logger.info "Game start #{i}/#{f.timestamp / 1000000.0}"
            state[:playing] = true
            events.push({type: :game_start, t: f.timestamp})
          end
        else
          if !state[:playing]
            $logger.error "Unexpected score update while not playing"
          else
            $logger.info "Extracted new score #{i}/#{f.timestamp / 1000000.0}: #{total}"
            events.push({type: :update_score, t: f.timestamp, score: total})
          end
        end
        previous_total = total
      end
    end
  elsif image.matches_mask?(final_mask)
    if state[:playing]
      $logger.info "Game end #{i}/#{f.timestamp / 1000000.0}"
      state[:playing] = false
    end
  end
  finish_time = Time.now
  times.push(finish_time - start_time)
end

$logger.info("Average frame processing time: %ims" % (times.sum / times.length.to_f * 1000))
if prof
  result = RubyProf.stop
  printer = RubyProf::GraphHtmlPrinter.new(result)
  File.open("graph.html", "w") {|f| printer.print(f) }

  printer = RubyProf::CallStackPrinter.new(result)
  File.open("calls.html", "w") {|f| printer.print(f) }
end
